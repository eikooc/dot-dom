<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Installation on .dom Documentation</title><link>https://wavesoft.github.io/dot-dom/docs/install/</link><description>Recent content in Installation on .dom Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://wavesoft.github.io/dot-dom/docs/install/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting Started</title><link>https://wavesoft.github.io/dot-dom/docs/install/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wavesoft.github.io/dot-dom/docs/install/getting-started/</guid><description> Getting Started Welcome to the exciting world of .dom.
There are various ways you can experiment or integrate .dom in your use case.
You can use the on-line playground You can learn how to create simple websites without any external dependencies. You can learn how to create single-page web-apps with it using babel and webpack. Or you can keep reading to learn more about it.
Next Topic Website with Declarative DOM &amp;rarr;</description></item><item><title>Website with Declarative DOM</title><link>https://wavesoft.github.io/dot-dom/docs/install/create-website/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wavesoft.github.io/dot-dom/docs/install/create-website/</guid><description>Creating a Website with Declarative DOM In the most simple case, you can use .dom as an external library to your website and you can design your layout using the built-in declarative DOM syntax.
The .dom library is quite agile and can be used without any external dependencies, such as code transipler (eg babel), packagers (eg. webpack) or other pre-processing tools. In this page we are presenting this simplest use case.</description></item><item><title>Web-App with JSX</title><link>https://wavesoft.github.io/dot-dom/docs/install/create-webapp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wavesoft.github.io/dot-dom/docs/install/create-webapp/</guid><description>Creating a WebApp with JSX If you want a more descriptive syntax for expressing your components, .dom natively supports React&amp;rsquo;s JSX syntax.
You can use the same tooling as with React to pre-process your javascript sources and convert them to .dom function calls. In this page we are describing step-by-step the process you should follow in order to create a single-page application using webpack and babel.
Starting a node project First we should start by creating a blank new node.</description></item><item><title>Serving GZ version of .dom</title><link>https://wavesoft.github.io/dot-dom/docs/install/serving-compressed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wavesoft.github.io/dot-dom/docs/install/serving-compressed/</guid><description>Serving the compressed version of .dom If you want to serve .dom on it&amp;rsquo;s smallest possible size, you might want to serve it compressed.
For example, in embedded (eg. IoT) projects the device memory is quite limited. Therefore storing the uncompressed version of the library might not be desired. In such cases, you can always serve .dom directly on it&amp;rsquo;s compressed form.
This is achieved simply by setting the correct encoding response header while streaming the compressed library to the client:</description></item></channel></rss>